#+title: Final Assignment's Labbook
#+author: Henrique Silva
#+email: hcpsilva@inf.ufrgs.br
#+infojs_opt:
#+property: session *R*
#+property: cache yes
#+property: results graphics
#+property: exports both
#+property: tangle yes

Welcome to this project's lab-book! Here I'll organize my thoughts and perhaps
put my scripts and so on and so forth.

As you may know, in this assignment we're expected to implement one or more
modules of a processor that's being simulated:

- *Prefetcher*
- *Cache substitution policy*
- *Branch predictor*

As of now we are still considering the options as of which of those we should
implement.

* Table of contents                                                   :TOC_3:
- [[#journal][Journal]]
  - [[#2019-12-25][2019-12-25]]
- [[#experiments][Experiments]]
  - [[#1---base-processors][1 - Base processors]]
    - [[#preprocessing][Preprocessing]]
    - [[#analysis][Analysis]]
  - [[#2---our-processor][2 - Our processor]]
    - [[#analysis-1][Analysis]]

* Journal

Thoughts and stuff.

** 2019-12-25

Merry Christmas I guess. So, we've got a preliminary list of what applications
to test, which is always useful, but still no idea of which element to
implement. Here's an excerpt:

#+begin_quote
- bzip2 :: integer. Imagino que compressão tenha um padrão de acesso aos dados
           contíguo e regular. Desse modo, com um prefetcher stream a gente
           consegue tirar mais proveito do que com um prefetcher strided por
           ex. Ainda mostraria como qualquer algoritmo de substituição não seria
           lá muito eficiente. Checar com Francis.
- gcc :: Acessos bem irregulares pros quais é difícil acertar qualquer
         coisa. Also é importante lembrar que haverá melhoras de uma
         configuração pra outra por conta da evolução dos branch predictors
         escolhidos.
- astar :: integer. Algoritmos de path finding em ambiente 2D.
- povray :: ray tracing. Normalmente OO, o que torna o acesso à mem
            interessante.  Also: iterações pelos objetos a cada pulo, teste de
            intersecção: branch predictor.
- calculix :: matrizes esparsas pra resolver equações diferenciais. Matrizes
              esparsas.
#+end_quote

I mean, I've got no idea of what benchmarks exercise the different parts of the
processor, so I'm all for it. As far as the simulator goes, I'll try to figure
out how it works. Time to read that convoluted =readme=...

So, I've understood how it works (because it's really easy to build and run
stuff). Thing is, I have absolutely no idea on how to implement the stuff
mentioned previously (the new policies, etc). Like, really no idea. I took a
look at all the modules we could implement, but they're really not that easy to
understand, which may have something to do with the fact that I don't know this
architecture stuff in the first place. And I'm kinda traumatized to go search in
those terrible slides because of my previous experiences.

I doubt that this simulator has seen some use in the academy, but I'll go look
for something anyways...

Well, I'll be damned! Here are some links:

- [[https://arxiv.org/pdf/1906.00877.pdf]]
- [[http://nope.pub/papers/2017/gomes2017watermarking.pdf]]
- [[https://www.usenix.org/system/files/woot19-paper_kumar.pdf]]

There are more, but the point was made. I think those are a bit overkill for a
simple uni assignment, because all of them verse about some really
state-of-the-art stuff. I'm thinking about finding some novel approach proposed
in the 80s-90s and implementing it, as these ought to be significantly simpler
than the ones I've collected.

Besides that stuff, I'm looking forward into having access to the report so I
can use the IEEE template.

* Experiments

Home to experiment-related scripts.

As defined in the specification of this assignment, all simulations will be
single-core, even though the simulator supports multi-core. So, as interference
isn't an issue, I'm thinking of launching as many executions as I can. This
would speed up the experiments significantly, but would imply in multiple copies
of the repo.

** 1 - Base processors                                               :EXP01:

The simplest of the bunch:

#+begin_example
Branch Predictor: bimodal
L1D Prefetcher: no
L1I Prefetcher: no
L2C Prefetcher: no
LLC Prefetcher: no
LLC Replacement: lru
Cores: 1
#+end_example

The "almost there" of the bunch:

#+begin_example
Branch Predictor: bimodal
L1D Prefetcher: next_line
L1I Prefetcher: next_line
L2C Prefetcher: ip_stride
LLC Prefetcher: no
LLC Replacement: lru
Cores: 1
#+end_example

The fastest of the bunch:

#+begin_example
Branch Predictor: hashed_perceptron
L1D Prefetcher: next_line
L1I Prefetcher: next_line
L2C Prefetcher: kpcp
LLC Prefetcher: next_line
LLC Replacement: drrip
Cores: 1
#+end_example

*** Preprocessing

In order to analyze the data, we must parse the output files to a more friendly
=csv= format.

#+begin_src bash :exports both :results output :dir ../results_200M/
OUT_FILE=base_results.csv

echo "application,size,branch,l1d_pref,l2c_pref,llc_pref,llc_rep,inst,cycles,ipc,l1d_tot_hit,l1d_tot_miss,l1d_pref_issued,l1d_pref_useful,l1d_pref_useless,l1d_lat,l2c_tot_hit,l2c_tot_miss,l2c_pref_issued,l2c_pref_useful,l2c_pref_useless,l2c_lat,llc_tot_hit,llc_tot_miss,llc_pref_issued,llc_pref_useful,llc_pref_useless,llc_lat,branch_acc,mpki,branch_direct,branch_indirect,branch_cond,branch_dir_call,branch_ind_call,branch_ret" > $OUT_FILE

for file in [0-9]*; do
    buffer=$(tr '-' ' ' <<<$file)

    app=$(awk '{print $1}' <<<$buffer)
    size=$(awk '{print $2}' <<<$buffer)
    branch=$(awk '{print $3}' <<<$buffer)
    l1d_p=$(awk '{print $4}' <<<$buffer)
    l2_p=$(awk '{print $6}' <<<$buffer)
    llc_p=$(awk '{print $7}' <<<$buffer)
    llc_repl=$(awk '{print $8}' <<<$buffer)

    line=${app##*.},${size%%.*},${branch},${l1d_p},${l2_p},${llc_p},${llc_repl},

    buffer=$(grep "CPU 0 cumulative" $file)
    insts=$(awk '{print $7}' <<<$buffer)
    cycles=$(awk '{print $9}' <<<$buffer)
    ipc=$(awk '{print $5}' <<<$buffer)

    line+=${insts},${cycles},${ipc},

    buffer=$(grep "L1D TOTAL" $file)
    l1d_hit=$(awk '{print $6}' <<<$buffer)
    l1d_miss=$(awk '{print $8}' <<<$buffer)

    line+=${l1d_hit},${l1d_miss},

    buffer=$(grep "L1D PREFETCH  REQUESTED:" $file)
    l1d_iss=$(awk '{print $6}' <<<$buffer)
    l1d_usef=$(awk '{print $8}' <<<$buffer)
    l1d_less=$(awk '{print $10}' <<<$buffer)

    line+=${l1d_iss},${l1d_usef},${l1d_less},

    buffer=$(grep "L1D AVERAGE MISS" $file | tr -d '-')

    line+=$(awk '{print $5}' <<<$buffer),

    buffer=$(grep "L2C TOTAL" $file)
    l1d_hit=$(awk '{print $6}' <<<$buffer)
    l1d_miss=$(awk '{print $8}' <<<$buffer)

    line+=${l1d_hit},${l1d_miss},

    buffer=$(grep "L2C PREFETCH  REQUESTED:" $file)
    l1d_iss=$(awk '{print $6}' <<<$buffer)
    l1d_usef=$(awk '{print $8}' <<<$buffer)
    l1d_less=$(awk '{print $10}' <<<$buffer)

    line+=${l1d_iss},${l1d_usef},${l1d_less},

    buffer=$(grep "L2C AVERAGE MISS" $file | tr -d '-')

    line+=$(awk '{print $5}' <<<$buffer),

    buffer=$(grep "LLC TOTAL" $file)
    l1d_hit=$(awk '{print $6}' <<<$buffer)
    l1d_miss=$(awk '{print $8}' <<<$buffer)

    line+=${l1d_hit},${l1d_miss},

    buffer=$(grep "LLC PREFETCH  REQUESTED:" $file)
    l1d_iss=$(awk '{print $6}' <<<$buffer)
    l1d_usef=$(awk '{print $8}' <<<$buffer)
    l1d_less=$(awk '{print $10}' <<<$buffer)

    line+=${l1d_iss},${l1d_usef},${l1d_less},

    buffer=$(grep "LLC AVERAGE MISS" $file | tr -d '-')

    line+=$(awk '{print $5}' <<<$buffer),

    buffer=$(grep "CPU 0 Branch Prediction" $file)

    branch_acc=$(awk '{print $6}' <<<$buffer | tr -d '%')
    mpki=$(awk '{print $8}' <<<$buffer)

    line+=${branch_acc},${mpki},

    line+=$(awk '{print $3}' <<<$(grep "BRANCH_DIRECT_JUMP:" $file) | tr -d '%'),
    line+=$(awk '{print $3}' <<<$(grep "BRANCH_INDIRECT:" $file) | tr -d '%'),
    line+=$(awk '{print $3}' <<<$(grep "BRANCH_CONDITIONAL:" $file) | tr -d '%'),
    line+=$(awk '{print $3}' <<<$(grep "BRANCH_DIRECT_CALL:" $file) | tr -d '%'),
    line+=$(awk '{print $3}' <<<$(grep "BRANCH_INDIRECT_CALL:" $file) | tr -d '%'),
    line+=$(awk '{print $3}' <<<$(grep "BRANCH_RETURN:" $file) | tr -d '%')

    echo $line >> $OUT_FILE
    echo "finished this line, yay!"
done

echo "i'm done!"
#+end_src

#+RESULTS:
#+begin_example
finished this line, yay!
finished this line, yay!
finished this line, yay!
finished this line, yay!
finished this line, yay!
finished this line, yay!
finished this line, yay!
finished this line, yay!
finished this line, yay!
finished this line, yay!
finished this line, yay!
finished this line, yay!
finished this line, yay!
finished this line, yay!
finished this line, yay!
i'm done!
#+end_example

*** Analysis

Let's explore this data...

#+begin_src R :session :results output :exports both
suppressMessages(library(tidyverse))
options(crayon.enabled = FALSE)

df <- read_csv("../results_200M/base_results.csv")
#+end_src

#+RESULTS:
#+begin_example

Parsed with column specification:
cols(
  .default = col_double(),
  application = col_character(),
  size = col_character(),
  branch = col_character(),
  l1d_pref = col_character(),
  l2c_pref = col_character(),
  llc_pref = col_character(),
  llc_rep = col_character()
)
See spec(...) for full column specifications.
#+end_example

Okay, let's compare the IPC then:

#+begin_src R :session :results output graphics :file (org-babel-temp-file "figure" ".png") :exports both :width 800 :height 600
suppressMessages(library(wesanderson))

df$l2c_pref <- factor(df$l2c_pref, levels = c("no", "ip_stride", "kpcp"))

df %>%
  select(application, l2c_pref, ipc) %>%
  ggplot(aes(fill = l2c_pref, y = ipc, x = application)) +
  geom_col(position = "dodge2", width = 0.6, color = "black") +
  scale_fill_manual(values = wes_palette(n = 3, name = "GrandBudapest1"),
                    labels = c("Simples", "Mediana", "Avançada")) +
  scale_y_continuous(expand = expand_scale(mult = c(0, 0.05)),
                     breaks = scales::pretty_breaks(n = 8)) +
  labs(x = "Aplicação",
       y = "Instruções Por Ciclo",
       fill = "Configuração Base") +
  theme_bw() +
  theme(text = element_text(family = "Palatino", size = 28),
        legend.position = "top")
#+end_src

#+RESULTS:
[[file:/tmp/babel-LoidVJ/figureBWqi0B.png]]

Cool. Let's look at something more interesting.

#+begin_src R :session :results output graphics :file (org-babel-temp-file "figure" ".png") :exports both :width 1200 :height 600
suppressMessages(library(wesanderson))

df$l2c_pref <- factor(df$l2c_pref, levels = c("no", "ip_stride", "kpcp"))

df %>%
  select(application, l2c_pref, l1d_tot_hit) %>%
  mutate(stat = "hit") %>%
  rename(value = l1d_tot_hit) -> dfh

df %>%
  select(application, l2c_pref, l1d_tot_miss) %>%
  mutate(stat = "miss") %>%
  rename(value = l1d_tot_miss) -> dfm

df2 <- bind_rows(dfh, dfm)

levels(df2$l2c_pref) <- c("Simples", "Médio", "Avançado")

df2 %>%
  ggplot(aes(fill = stat, y = value, x = application)) +
  geom_col(position = "dodge2", width = 0.6, color = "black") +
  scale_fill_manual(values = wes_palette(n = 3, name = "GrandBudapest1"),
                    labels = c("Hit", "Miss")) +
  scale_y_log10(
    expand = expand_scale(mult = c(0, 0.03)),
    breaks = scales::trans_breaks(n = 8, "log10", function(x) 10^x),
    labels = scales::trans_format("log10", scales::math_format(10^.x))
  ) +
  annotation_logticks(sides = "lr") +
  facet_grid(. ~ l2c_pref) +
  labs(x = "Aplicação",
       y = "Quantidade (log10)",
       fill = "Acesso à cache nível 1 de dados") +
  theme_bw() +
  theme(text = element_text(family = "Palatino", size = 28),
        legend.position = "top")
#+end_src

#+RESULTS:
[[file:/tmp/babel-LoidVJ/figureGgs079.png]]

Now grouping in another way...

#+begin_src R :session :results output graphics :file (org-babel-temp-file "figure" ".png") :exports both :width 1000 :height 800
suppressMessages(library(wesanderson))

df$l2c_pref <- factor(df$l2c_pref, levels = c("no", "ip_stride", "kpcp"))

df %>%
  select(application, l2c_pref, l1d_tot_hit) %>%
  mutate(stat = "Hit", l1d_tot_hit = l1d_tot_hit / 1000000) %>%
  rename(value = l1d_tot_hit) -> dfh

df %>%
  select(application, l2c_pref, l1d_tot_miss) %>%
  mutate(stat = "Miss", l1d_tot_miss = l1d_tot_miss / 1000000) %>%
  rename(value = l1d_tot_miss) -> dfm

df2 <- bind_rows(dfh, dfm)

levels(df2$l2c_pref) <- c("Simples", "Médio", "Avançado")

df2 %>%
  ggplot(aes(fill = l2c_pref, y = value, x = application)) +
  geom_col(position = "dodge2", width = 0.6, color = "black") +
  scale_fill_manual(values = wes_palette(n = 3, name = "GrandBudapest1"),
                    labels = c("Simples", "Médio", "Avançado")) +
  ## scale_y_log10(
  ##   expand = expand_scale(mult = c(0, 0.03)),
  ##   breaks = scales::trans_breaks(n = 8, "log10", function(x) 10^x),
  ##   labels = scales::trans_format("log10", scales::math_format(10^.x))
  ## ) +
  scale_y_continuous(expand = expand_scale(mult = c(0, 0.03)),
                     breaks = scales::pretty_breaks(n = 8)) +
  ## annotation_logticks(sides = "lr") +
  facet_grid(stat ~ .) +
  labs(x = "Aplicação",
       y = "Quantidade [x10^6]",
       fill = "Acesso à cache nível 1 de dados") +
  theme_bw() +
  theme(text = element_text(family = "Palatino", size = 28),
        panel.spacing = unit(2, "lines"),
        legend.position = "top")
#+end_src

#+RESULTS:
[[file:/tmp/babel-LoidVJ/figureP1G0gI.png]]

Now let's see some relative misses...

#+begin_src R :session :results output graphics :file (org-babel-temp-file "figure" ".png") :exports both :width 900 :height 500
suppressMessages(library(wesanderson))

df$l2c_pref <- factor(df$l2c_pref, levels = c("no", "ip_stride", "kpcp"))

df %>%
  select(application, l2c_pref, l1d_tot_hit, l1d_tot_miss) %>%
  mutate(stat = "L1D", value = l1d_tot_miss / l1d_tot_hit) %>%
  select(application, l2c_pref, stat, value) -> dfl1

df %>%
  select(application, l2c_pref, l2c_tot_hit, l2c_tot_miss) %>%
  mutate(stat = "L2C", value = l2c_tot_miss / l2c_tot_hit) %>%
  select(application, l2c_pref, stat, value) -> dfl2

df %>%
  select(application, l2c_pref, llc_tot_hit, llc_tot_miss) %>%
  mutate(stat = "LLC", value = llc_tot_miss / llc_tot_hit) %>%
  select(application, l2c_pref, stat, value) -> dfll

df2 <- dfl1

levels(df2$l2c_pref) <- c("Simples", "Médio", "Avançado")

df2 %>%
  ggplot(aes(fill = l2c_pref, y = value, x = application)) +
  geom_col(position = "dodge2", width = 0.6, color = "black") +
  scale_fill_manual(values = wes_palette(n = 3, name = "GrandBudapest1"),
                    labels = c("Simples", "Médio", "Avançado")) +
  scale_y_continuous(expand = expand_scale(mult = c(0, 0.03)),
                     breaks = scales::pretty_breaks(n = 8)) +
  facet_grid(stat ~ .) +
  labs(x = "Aplicação",
       y = "Misses / Hits",
       fill = "Misses relativos na L1D") +
  theme_bw() +
  theme(text = element_text(family = "Palatino", size = 28),
        panel.spacing = unit(2, "lines"),
        legend.position = "top")
#+end_src

#+RESULTS:
[[file:/tmp/babel-LoidVJ/figurekT1NCu.png]]

#+begin_src R :session :results output graphics :file (org-babel-temp-file "figure" ".png") :exports both :width 900 :height 500
suppressMessages(library(wesanderson))

df$l2c_pref <- factor(df$l2c_pref, levels = c("no", "ip_stride", "kpcp"))

df %>%
  select(application, l2c_pref, l1d_tot_hit, l1d_tot_miss) %>%
  mutate(stat = "L1D", value = l1d_tot_miss / l1d_tot_hit) %>%
  select(application, l2c_pref, stat, value) -> dfl1

df %>%
  select(application, l2c_pref, l2c_tot_hit, l2c_tot_miss) %>%
  mutate(stat = "L2C", value = l2c_tot_miss / l2c_tot_hit) %>%
  select(application, l2c_pref, stat, value) -> dfl2

df %>%
  select(application, l2c_pref, llc_tot_hit, llc_tot_miss) %>%
  mutate(stat = "LLC", value = llc_tot_miss / llc_tot_hit) %>%
  select(application, l2c_pref, stat, value) -> dfll

df2 <- dfl2

levels(df2$l2c_pref) <- c("Simples", "Médio", "Avançado")

df2 %>%
  ggplot(aes(fill = l2c_pref, y = value, x = application)) +
  geom_col(position = "dodge2", width = 0.6, color = "black") +
  scale_fill_manual(values = wes_palette(n = 3, name = "GrandBudapest1"),
                    labels = c("Simples", "Médio", "Avançado")) +
  scale_y_continuous(expand = expand_scale(mult = c(0, 0.03)),
                     breaks = scales::pretty_breaks(n = 8)) +
  facet_grid(stat ~ .) +
  labs(x = "Aplicação",
       y = "Misses / Hits",
       fill = "Misses relativos na L2C") +
  theme_bw() +
  theme(text = element_text(family = "Palatino", size = 28),
        panel.spacing = unit(2, "lines"),
        legend.position = "top")
#+end_src

#+RESULTS:
[[file:/tmp/babel-LoidVJ/figureYR79Un.png]]

#+begin_src R :session :results output graphics :file (org-babel-temp-file "figure" ".png") :exports both :width 900 :height 500
suppressMessages(library(wesanderson))

df$l2c_pref <- factor(df$l2c_pref, levels = c("no", "ip_stride", "kpcp"))

df %>%
  select(application, l2c_pref, l1d_tot_hit, l1d_tot_miss) %>%
  mutate(stat = "L1D", value = l1d_tot_miss / l1d_tot_hit) %>%
  select(application, l2c_pref, stat, value) -> dfl1

df %>%
  select(application, l2c_pref, l2c_tot_hit, l2c_tot_miss) %>%
  mutate(stat = "L2C", value = l2c_tot_miss / l2c_tot_hit) %>%
  select(application, l2c_pref, stat, value) -> dfl2

df %>%
  select(application, l2c_pref, llc_tot_hit, llc_tot_miss) %>%
  mutate(stat = "LLC", value = llc_tot_miss / llc_tot_hit) %>%
  select(application, l2c_pref, stat, value) -> dfll

df2 <- dfll

levels(df2$l2c_pref) <- c("Simples", "Médio", "Avançado")

df2 %>%
  ggplot(aes(fill = l2c_pref, y = value, x = application)) +
  geom_col(position = "dodge2", width = 0.6, color = "black") +
  scale_fill_manual(values = wes_palette(n = 3, name = "GrandBudapest1"),
                    labels = c("Simples", "Médio", "Avançado")) +
  scale_y_continuous(expand = expand_scale(mult = c(0, 0.03)),
                     breaks = scales::pretty_breaks(n = 8)) +
  facet_grid(stat ~ .) +
  labs(x = "Aplicação",
       y = "Misses / Hits",
       fill = "Misses relativos na LLC") +
  theme_bw() +
  theme(text = element_text(family = "Palatino", size = 28),
        panel.spacing = unit(2, "lines"),
        legend.position = "top")
#+end_src

#+RESULTS:
[[file:/tmp/babel-LoidVJ/figureQBhv6p.png]]

Nice, now MPKI...

#+begin_src R :session :results output graphics :file (org-babel-temp-file "figure" ".png") :exports both :width 800 :height 600
suppressMessages(library(wesanderson))

df$l2c_pref <- factor(df$l2c_pref, levels = c("no", "ip_stride", "kpcp"))

df %>%
  select(application, l2c_pref, mpki) %>%
  ggplot(aes(fill = l2c_pref, y = mpki, x = application)) +
  geom_col(position = "dodge2", width = 0.6, color = "black") +
  scale_fill_manual(values = wes_palette(n = 3, name = "GrandBudapest1"),
                    labels = c("Simples", "Mediana", "Avançada")) +
  scale_y_continuous(expand = expand_scale(mult = c(0, 0.05)),
                     breaks = scales::pretty_breaks(n = 8)) +
  labs(x = "Aplicação",
       y = "MPKI",
       fill = "Configuração Base") +
  theme_bw() +
  theme(text = element_text(family = "Palatino", size = 28),
        legend.position = "top")
#+end_src

#+RESULTS:
[[file:/tmp/babel-LoidVJ/figurehIjeh7.png]]

I think it'd be cool to see the useful vs useless prefetchs...

#+begin_src R :session :results output graphics :file (org-babel-temp-file "figure" ".png") :exports both :width 1000 :height 900
suppressMessages(library(wesanderson))

df$l2c_pref <- factor(df$l2c_pref, levels = c("no", "ip_stride", "kpcp"))

df %>%
  select(application, l2c_pref, l1d_pref_useful) %>%
  mutate(stat = "Úteis", l1d_pref_useful = l1d_pref_useful / 100000) %>%
  rename(value = l1d_pref_useful) -> dfh

df %>%
  select(application, l2c_pref, l1d_pref_useless) %>%
  mutate(stat = "Inúteis", l1d_pref_useless = l1d_pref_useless / 100000) %>%
  rename(value = l1d_pref_useless) -> dfm

df2 <- bind_rows(dfh, dfm)

levels(df2$l2c_pref) <- c("Simples", "Médio", "Avançado")

df2 %>%
  filter(l2c_pref != "Simples") %>%
  ggplot(aes(fill = l2c_pref, y = value, x = application)) +
  geom_col(position = "dodge2", width = 0.6, color = "black") +
  scale_fill_manual(values = wes_palette(n = 3, name = "GrandBudapest1"),
                    labels = c("Médio", "Avançado")) +
  scale_y_continuous(expand = expand_scale(mult = c(0, 0.03)),
                     breaks = scales::pretty_breaks(n = 8)) +
  facet_grid(stat ~ .) +
  labs(x = "Aplicação",
       y = "Quantidade [x10^5]",
       fill = "Configuração utilizada",
       title = "Utilidade dos prefetchs realizados na L1D") +
  theme_bw() +
  theme(text = element_text(family = "Palatino", size = 28),
        panel.spacing = unit(2, "lines"),
        legend.position = "top")
#+end_src

#+RESULTS:
[[file:/tmp/babel-LoidVJ/figureKVhHMY.png]]

#+begin_src R :session :results output graphics :file (org-babel-temp-file "figure" ".png") :exports both :width 1000 :height 900
suppressMessages(library(wesanderson))

df$l2c_pref <- factor(df$l2c_pref, levels = c("no", "ip_stride", "kpcp"))

df %>%
  select(application, l2c_pref, l2c_pref_useful) %>%
  mutate(stat = "Úteis", l2c_pref_useful = l2c_pref_useful / 100000) %>%
  rename(value = l2c_pref_useful) -> dfh

df %>%
  select(application, l2c_pref, l2c_pref_useless) %>%
  mutate(stat = "Inúteis", l2c_pref_useless = l2c_pref_useless / 100000) %>%
  rename(value = l2c_pref_useless) -> dfm

df2 <- bind_rows(dfh, dfm)

levels(df2$l2c_pref) <- c("Simples", "Médio", "Avançado")

df2 %>%
  filter(l2c_pref != "Simples") %>%
  ggplot(aes(fill = l2c_pref, y = value, x = application)) +
  geom_col(position = "dodge2", width = 0.6, color = "black") +
  scale_fill_manual(values = wes_palette(n = 3, name = "GrandBudapest1"),
                    labels = c("Médio", "Avançado")) +
  scale_y_continuous(expand = expand_scale(mult = c(0, 0.03)),
                     breaks = scales::pretty_breaks(n = 8)) +
  facet_grid(stat ~ .) +
  labs(x = "Aplicação",
       y = "Quantidade [x10^5]",
       fill = "Configuração utilizada",
       title = "Utilidade dos prefetchs realizados na L2C") +
  theme_bw() +
  theme(text = element_text(family = "Palatino", size = 28),
        panel.spacing = unit(2, "lines"),
        legend.position = "top")
#+end_src

#+RESULTS:
[[file:/tmp/babel-LoidVJ/figurej1zeOD.png]]

#+begin_src R :session :results output graphics :file (org-babel-temp-file "figure" ".png") :exports both :width 1000 :height 900
suppressMessages(library(wesanderson))

df$l2c_pref <- factor(df$l2c_pref, levels = c("no", "ip_stride", "kpcp"))

df %>%
  select(application, l2c_pref, llc_pref_useful) %>%
  mutate(stat = "Úteis", llc_pref_useful = llc_pref_useful / 100000) %>%
  rename(value = llc_pref_useful) -> dfh

df %>%
  select(application, l2c_pref, llc_pref_useless) %>%
  mutate(stat = "Inúteis", llc_pref_useless = llc_pref_useless / 100000) %>%
  rename(value = llc_pref_useless) -> dfm

df2 <- bind_rows(dfh, dfm)

levels(df2$l2c_pref) <- c("Simples", "Médio", "Avançado")

df2 %>%
  filter(l2c_pref != "Simples") %>%
  ggplot(aes(fill = l2c_pref, y = value, x = application)) +
  geom_col(position = "dodge2", width = 0.6, color = "black") +
  scale_fill_manual(values = wes_palette(n = 3, name = "GrandBudapest1"),
                    labels = c("Médio", "Avançado")) +
  scale_y_continuous(expand = expand_scale(mult = c(0, 0.03)),
                     breaks = scales::pretty_breaks(n = 8)) +
  facet_grid(stat ~ .) +
  labs(x = "Aplicação",
       y = "Quantidade [x10^5]",
       fill = "Configuração utilizada",
       title = "Utilidade dos prefetchs realizados na LLC") +
  theme_bw() +
  theme(text = element_text(family = "Palatino", size = 28),
        panel.spacing = unit(2, "lines"),
        legend.position = "top")
#+end_src

#+RESULTS:
[[file:/tmp/babel-LoidVJ/figure7fgB6d.png]]

** 2 - Our processor                                                 :EXP02:

Unknown characteristics!

*** Analysis

Placeholder
